---
alwaysApply: true
---

# Zion 代码组件开发主控制器 v3.0

## 🎯 核心使命

基于用户一句话需求，通过智能模式控制，自动化完成Zion组件的完整开发流程。

## 🧠 智能模式控制

### 模式识别与流程调度

#### REQUIREMENT 模式
**触发条件**：
- 用户提出新组件开发需求
- 需求描述不够详细或完整

**执行动作**：
```markdown
引用文件：@zion-requirement-refinement.mdc
**执行动作**：
立即开始执行需求完善流程的第一步，按照"一次一问"原则逐步完善需求，完成后提示用户输入 "PLAN" 生成开发计划
```

#### PLAN 模式  
**触发条件**：
- 用户完成需求完善流程
- 用户输入 "PLAN"
- 需要技术方案确认

**执行动作**：
```markdown
## 📋 Zion 组件开发计划

### 🎯 需求分析
[基于完善后的需求，确定组件名称和功能]
[判断是否需要绑定具体项目数据字段]

### 🏗️ 项目规划
- 项目名称: [项目名称+组件名称]
- 组件名称: [组件名称（中文）]
- 目标功能: [功能描述]
- 数据需求: [是否需要项目数据字段]

### 🔧 技术方案
[基于需求分析确定技术实现方案]

### 📝 执行步骤
1. 环境验证与登录
2. 项目状态检查与初始化
3. 依赖安装检查
4. 通过 Zion MCP 获取项目配置（条件性调用）
5. 需求解析确认
6. 目录文件生成
7. 代码实现
8. 组件集成
9. 代码合规校验与自检
10. 本地打包测试
11. 本地预览测试
12. 测试发布
13. 文档补全
14. 平台预览调试
15. 发布上线

**请输入 "ACT" 确认执行此计划**
```

#### ACT 模式
**触发条件**：
- 用户输入 "ACT" 
- 用户提出直接的操作请求

**执行动作**：
```markdown
引用文件：
- @zion-development-workflow.mdc (执行流程)
- @zion-code-standards.mdc (代码规范)
- @zion-graphql-schema-guide.mdc (需要时引用)

执行15步标准开发流程
```

## 🔍 智能项目检测机制

### 项目状态检查逻辑

```typescript
// 检查当前目录项目状态
const hasPackageJson = fs.existsSync('./package.json');
const hasSrcDir = fs.existsSync('./src');
const hasComponentsDir = fs.existsSync('./src/components');

// 判断是否为有效的Zion项目
const isValidZionProject = hasPackageJson && hasSrcDir && hasComponentsDir;

if (isValidZionProject) {
  console.log('✅ 检测到现有Zion项目');
  
  // 询问用户意愿
  const userChoice = await askUser(`
检测到当前目录已有Zion项目，请选择：
1. 在当前项目下创建新组件
2. 新建项目并创建组件

请输入选择 (1 或 2):`);

  // 根据用户选择执行相应操作
  if (userChoice === '1') {
    // 在当前项目下创建组件
  } else if (userChoice === '2') {
    // 创建新项目
  }
} else {
  // 直接创建新项目
}
```

## 🛡️ 核心约束

### 目录唯一性原则
- **智能项目检测**：开始任何操作前必须检查项目状态
- **用户友好交互**：现有项目时询问用户意愿，避免强制决策
- **唯一工作目录**：所有操作均在Zion项目目录内进行

### 规范遵循原则
- **严格遵循Zion平台组件开发规范**
- **三段式接口规范**: PropData、StateData、Event、Props
- **禁止自定义决策**: 不能擅自添加模拟数据或精简功能

## 🔄 异常处理机制

### 异常恢复策略
- **环境异常**: 自动重试，最多3次
- **项目冲突**: 自动重命名，最多尝试5次  
- **代码错误**: 自动修复常见问题
- **发布失败**: 自动升级版本号重试

### 上下文总结
每个步骤执行后记录状态，支持断点续跑和错误恢复。

## 📋 模式切换命令

- **开始需求完善**: 直接提出组件需求
- **生成开发计划**: 输入 "PLAN"
- **执行开发流程**: 输入 "ACT" 
- **查看规范**: 自动引用相关规范文件

---

**注意**: 本文件为主控制器，负责模式识别和流程调度。具体执行逻辑请参考对应的专业文件。